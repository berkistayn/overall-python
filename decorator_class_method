# As an example:
import time
import threading

class Worker:
    def __init__(self):
        self.no_bounding_jobs = 0
        self.IsBusy = False

    ### HERE ! Below one is what you come here for
    def time_consuming(func): # pylint: disable=no-self-argument
        def decorate(*args):
            self = args[0]
            self.one_more_job()
            func(*args) # pylint: disable=not-callable
            self.one_less_job()
        return decorate

    @time_consuming
    def do_work(self):
        for i in range(5):
            time.sleep(1)
            print(i)

    def one_more_job(self):
        self.no_bounding_jobs += 1
        self.update_workload()

    def one_less_job(self):
        self.no_bounding_jobs -= 1
        self.update_workload()

    def update_workload(self):
        self.IsBusy = True if self.no_bounding_jobs > 0 else False


def check_business(worker):
    while True:
        time.sleep(0.3)
        print(worker.IsBusy)

w = Worker()

t = threading.Thread(target=check_business, args=[w])
t.start()
time.sleep(2)

w.do_work()
